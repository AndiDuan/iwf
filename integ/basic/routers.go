/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package basic

import (
	"github.com/cadence-oss/iwf-server/gen/client/workflow/state"
	"github.com/cadence-oss/iwf-server/service"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
)

const (
	stateApi  = "/api/v1/workflowState/start"
	decideApi = "/api/v1/workflowState/decide"

	WorkflowType = "basic"
	State1       = "S1"
	State2       = "S2"
)

// NewBasicWorkflow returns a new gin server.
func NewBasicWorkflow() *gin.Engine {
	router := gin.Default()

	handler := newHandler()

	router.POST(stateApi, handler.apiV1WorkflowStateStart)
	router.POST(decideApi, handler.apiV1WorkflowStateDecide)

	return router
}

type handler struct{}

func newHandler() *handler {
	return &handler{}
}

// ApiV1WorkflowStartPost - for a workflow
func (h *handler) apiV1WorkflowStateStart(c *gin.Context) {
	var req state.WorkflowStateStartRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received state start request, ", req)

	if req.GetWorkflowType() == WorkflowType {
		// basic workflow go straight to decide methods without any commands
		if req.GetWorkflowStateId() == State1 || req.GetWorkflowStateId() == State2 {
			c.JSON(http.StatusOK, state.NewWorkflowStateStartResponse())
			return
		}
	}

	c.JSON(http.StatusBadRequest, struct{}{})
}

func (h *handler) apiV1WorkflowStateDecide(c *gin.Context) {
	var req state.WorkflowStateStartRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received state decide request, ", req)

	if req.GetWorkflowType() == WorkflowType {
		if req.GetWorkflowStateId() == State1 {
			// go to S2
			c.JSON(http.StatusOK, state.WorkflowStateDecideResponse{
				StateDecision: []state.StateDecision{
					{
						NextStates: []state.StateMovement{
							{
								StateId: state.PtrString(State2),
							},
						},
					},
				},
			})
			return
		} else if req.GetWorkflowStateId() == State2 {
			// go to complete
			c.JSON(http.StatusOK, state.WorkflowStateDecideResponse{
				StateDecision: []state.StateDecision{
					{
						NextStates: []state.StateMovement{
							{
								StateId: state.PtrString(service.CompleteWorkflowStateId),
							},
						},
					},
				},
			})
			return
		}
	}

	c.JSON(http.StatusBadRequest, struct{}{})
}
