/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"fmt"
	"github.com/cadence-oss/iwf-server/gen/server/workflow"

	"github.com/cadence-oss/iwf-server/gen/client/workflow/state"
	temporalimpl "github.com/cadence-oss/iwf-server/service/interpreter/temporalImpl"
	"go.temporal.io/sdk/client"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

// Index is the index handler.
func Index(c *gin.Context) {
	// for test only, will be removed
	runTestRestApi()
	runTestTemporalWorkflow()

	c.String(http.StatusOK, "Hello World!")
}

// ApiV1WorkflowStartPost - for a workflow
func ApiV1WorkflowStartPost(c *gin.Context) {
	var req workflow.WorkflowStartRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	fmt.Println(req)

	c.JSON(http.StatusOK, gin.H{})
}

func runTestTemporalWorkflow() {

	fmt.Println("test temporal workflow")

	// The client is a heavyweight object that should be created once per process.
	c, err := client.Dial(client.Options{})
	if err != nil {
		log.Fatalln("Unable to create client", err)
	}
	defer c.Close()

	workflowOptions := client.StartWorkflowOptions{
		ID:        "hello_world_workflowID",
		TaskQueue: "hello-world",
	}

	we, err := c.ExecuteWorkflow(context.Background(), workflowOptions, temporalimpl.Interpreter, "Temporal")
	if err != nil {
		log.Fatalln("Unable to execute workflow", err)
	}

	log.Println("Started workflow", "WorkflowID", we.GetID(), "RunID", we.GetRunID())

	// Synchronously wait for the workflow completion.
	var result string
	err = we.Get(context.Background(), &result)
	if err != nil {
		log.Fatalln("Unable get workflow result", err)
	}
	log.Println("Workflow result:", result)
}

func runTestRestApi() {
	apiClient := state.NewAPIClient(&state.Configuration{})
	req := apiClient.DefaultApi.ApiV1WorkflowStateStartPost(context.Background())
	wfType := "123"
	resp, httpResp, err := req.WorkflowStateStartRequest(state.WorkflowStateStartRequest{
		WorkflowType: &wfType,
	}).Execute()
	fmt.Println("test REST API", resp.GetCommandRequest(), httpResp, err)
}
