/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"github.com/cadence-oss/iwf-server/gen/iwfidl"
	"github.com/cadence-oss/iwf-server/service"
	"github.com/cadence-oss/iwf-server/service/interpreter/temporal"

	"go.temporal.io/sdk/client"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type handler struct {
	temporalClient client.Client
}

func newHandler(temporalClient client.Client) *handler {
	return &handler{
		temporalClient: temporalClient,
	}
}

func (h *handler) close() {
	h.temporalClient.Close()
}

// Index is the index handler.
func (h *handler) index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

// ApiV1WorkflowStartPost - for a workflow
func (h *handler) apiV1WorkflowStartPost(c *gin.Context) {
	var req iwfidl.WorkflowStartRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	workflowOptions := client.StartWorkflowOptions{
		ID:        req.GetWorkflowId(),
		TaskQueue: service.TaskQueue,
	}

	input := service.InterpreterWorkflowInput{
		IwfWorkflowType: req.GetIwfWorkflowType(),
		IwfWorkerUrl:    req.GetIwfWorkerUrl(),
		StartStateId:    req.GetStartStateId(),
		StateInput:      req.GetStateInput(),
		StateOptions:    req.GetStateOptions(),
	}
	we, err := h.temporalClient.ExecuteWorkflow(context.Background(), workflowOptions, temporal.Interpreter, input)
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	log.Println("Started workflow", "WorkflowID", we.GetID(), "RunID", we.GetRunID())

	c.JSON(http.StatusOK, iwfidl.WorkflowStartResponse{
		WorkflowRunId: iwfidl.PtrString(we.GetRunID()),
	})
}

func (h *handler) apiV1WorkflowSignalPost(c *gin.Context) {
	var req iwfidl.WorkflowSignalRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	err := h.temporalClient.SignalWorkflow(context.Background(),
		req.GetWorkflowId(), req.GetWorkflowRunId(), req.GetSignalName(), req.GetSignalValue())
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}
	c.JSON(http.StatusOK, struct{}{})
}

func (h *handler) apiV1WorkflowQueryPost(c *gin.Context) {
	var req iwfidl.WorkflowQueryRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	qres, err := h.temporalClient.QueryWorkflow(context.Background(),
		req.GetWorkflowId(), req.GetWorkflowRunId(), service.AttributeQueryType,
		service.QueryAttributeRequest{
			Keys: req.AttributeKeys,
		})
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	var queryResult1 service.QueryAttributeResponse
	err = qres.Get(&queryResult1)
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	c.JSON(http.StatusOK, iwfidl.WorkflowQueryResponse{
		QueryAttributes: queryResult1.AttributeValues,
	})
}
