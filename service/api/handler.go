/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"fmt"
	"github.com/cadence-oss/iwf-server/gen/iwfidl"
	"github.com/cadence-oss/iwf-server/service"
	"github.com/cadence-oss/iwf-server/service/interpreter/temporal"
	"go.temporal.io/api/enums/v1"
	"go.temporal.io/api/workflowservice/v1"

	"go.temporal.io/sdk/client"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type handler struct {
	temporalClient client.Client
}

func newHandler(temporalClient client.Client) *handler {
	return &handler{
		temporalClient: temporalClient,
	}
}

func (h *handler) close() {
	h.temporalClient.Close()
}

// Index is the index handler.
func (h *handler) index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

// ApiV1WorkflowStartPost - for a workflow
func (h *handler) apiV1WorkflowStartPost(c *gin.Context) {
	var req iwfidl.WorkflowStartRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	workflowOptions := client.StartWorkflowOptions{
		ID:        req.GetWorkflowId(),
		TaskQueue: service.TaskQueue,
	}

	input := service.InterpreterWorkflowInput{
		IwfWorkflowType: req.GetIwfWorkflowType(),
		IwfWorkerUrl:    req.GetIwfWorkerUrl(),
		StartStateId:    req.GetStartStateId(),
		StateInput:      req.GetStateInput(),
		StateOptions:    req.GetStateOptions(),
	}
	we, err := h.temporalClient.ExecuteWorkflow(context.Background(), workflowOptions, temporal.Interpreter, input)
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	log.Println("Started workflow", "WorkflowID", we.GetID(), "RunID", we.GetRunID())

	c.JSON(http.StatusOK, iwfidl.WorkflowStartResponse{
		WorkflowRunId: iwfidl.PtrString(we.GetRunID()),
	})
}

func (h *handler) apiV1WorkflowSignalPost(c *gin.Context) {
	var req iwfidl.WorkflowSignalRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	err := h.temporalClient.SignalWorkflow(context.Background(),
		req.GetWorkflowId(), req.GetWorkflowRunId(), req.GetSignalName(), req.GetSignalValue())
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}
	c.JSON(http.StatusOK, struct{}{})
}

func (h *handler) apiV1WorkflowSearchPost(c *gin.Context) {
	var req iwfidl.WorkflowSearchRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	pageSize := int32(1000)
	if req.GetPageSize() > 0 {
		pageSize = req.GetPageSize()
	}
	resp, err := h.temporalClient.ListWorkflow(context.Background(), &workflowservice.ListWorkflowExecutionsRequest{
		PageSize: pageSize,
	})
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}
	var entries []iwfidl.WorkflowSearchResponseEntry
	for _, wf := range resp.GetExecutions() {
		entries = append(entries, iwfidl.WorkflowSearchResponseEntry{
			WorkflowId:    wf.GetExecution().GetWorkflowId(),
			WorkflowRunId: wf.GetExecution().GetRunId(),
		})
	}
	c.JSON(http.StatusOK, iwfidl.WorkflowSearchResponse{
		WorkflowExecutions: entries,
	})
}

func (h *handler) apiV1WorkflowQueryPost(c *gin.Context) {
	var req iwfidl.WorkflowQueryRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	qres, err := h.temporalClient.QueryWorkflow(context.Background(),
		req.GetWorkflowId(), req.GetWorkflowRunId(), service.AttributeQueryType,
		service.QueryAttributeRequest{
			Keys: req.AttributeKeys,
		})
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	var queryResult1 service.QueryAttributeResponse
	err = qres.Get(&queryResult1)
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	c.JSON(http.StatusOK, iwfidl.WorkflowQueryResponse{
		QueryAttributes: queryResult1.AttributeValues,
	})
}

func (h *handler) apiV1WorkflowGetPost(c *gin.Context) {
	h.doApiV1WorkflowGetPost(c, false)
}

func (h *handler) apiV1WorkflowGetWithLongWaitPost(c *gin.Context) {
	h.doApiV1WorkflowGetPost(c, true)
}

func (h *handler) doApiV1WorkflowGetPost(c *gin.Context, waitIfStillRunning bool) {
	var req iwfidl.WorkflowGetRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	log.Println("received request", req)

	resp, err := h.temporalClient.DescribeWorkflowExecution(context.Background(), req.GetWorkflowId(), req.GetWorkflowRunId())
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}
	var output service.InterpreterWorkflowOutput
	if req.GetNeedsResults() {
		if resp.GetWorkflowExecutionInfo().GetStatus() == enums.WORKFLOW_EXECUTION_STATUS_COMPLETED || waitIfStillRunning {
			run := h.temporalClient.GetWorkflow(context.Background(), req.GetWorkflowId(), req.GetWorkflowRunId())
			err = run.Get(context.Background(), &output)
			if err != nil {
				// TODO differentiate different error for different codes
				// we need to describe the workflow again to get the right status here
				c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
					Detail: iwfidl.PtrString(err.Error()),
				})
			}
		}
	}

	status, err := mapToIwfWorkflowStatus(resp.GetWorkflowExecutionInfo().GetStatus())
	if req.GetNeedsResults() && waitIfStillRunning {
		status = service.WorkflowStatusCompleted
	}
	if err != nil {
		// TODO differentiate different error for different codes
		c.JSON(http.StatusInternalServerError, iwfidl.ErrorResponse{
			Detail: iwfidl.PtrString(err.Error()),
		})
	}

	c.JSON(http.StatusOK, iwfidl.WorkflowGetResponse{
		WorkflowRunId:  resp.GetWorkflowExecutionInfo().GetExecution().GetRunId(),
		WorkflowStatus: status,
		Results:        output.StateCompletionOutputs,
	})
}

func mapToIwfWorkflowStatus(status enums.WorkflowExecutionStatus) (string, error) {
	switch status {
	case enums.WORKFLOW_EXECUTION_STATUS_CANCELED:
		return service.WorkflowStatusCanceled, nil
	case enums.WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW:
		return service.WorkflowStatusContinueAsNew, nil
	case enums.WORKFLOW_EXECUTION_STATUS_FAILED:
		return service.WorkflowStatusFailed, nil
	case enums.WORKFLOW_EXECUTION_STATUS_RUNNING:
		return service.WorkflowStatusRunning, nil
	case enums.WORKFLOW_EXECUTION_STATUS_TIMED_OUT:
		return service.WorkflowStatusTimeout, nil
	case enums.WORKFLOW_EXECUTION_STATUS_TERMINATED:
		return service.WorkflowStatusTerminated, nil
	default:
		return "", fmt.Errorf("not supported status %s", status)
	}
}
