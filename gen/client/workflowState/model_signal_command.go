/*
WorkflowState APIs

This APIs for iwf-server to invoke user workflow code defined in WorkflowState using any iwf SDKs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SignalCommand struct for SignalCommand
type SignalCommand struct {
	CommandId *string `json:"commandId,omitempty"`
	SignalName *string `json:"signalName,omitempty"`
}

// NewSignalCommand instantiates a new SignalCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalCommand() *SignalCommand {
	this := SignalCommand{}
	return &this
}

// NewSignalCommandWithDefaults instantiates a new SignalCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalCommandWithDefaults() *SignalCommand {
	this := SignalCommand{}
	return &this
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *SignalCommand) GetCommandId() string {
	if o == nil || o.CommandId == nil {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetCommandIdOk() (*string, bool) {
	if o == nil || o.CommandId == nil {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *SignalCommand) HasCommandId() bool {
	if o != nil && o.CommandId != nil {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *SignalCommand) SetCommandId(v string) {
	o.CommandId = &v
}

// GetSignalName returns the SignalName field value if set, zero value otherwise.
func (o *SignalCommand) GetSignalName() string {
	if o == nil || o.SignalName == nil {
		var ret string
		return ret
	}
	return *o.SignalName
}

// GetSignalNameOk returns a tuple with the SignalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetSignalNameOk() (*string, bool) {
	if o == nil || o.SignalName == nil {
		return nil, false
	}
	return o.SignalName, true
}

// HasSignalName returns a boolean if a field has been set.
func (o *SignalCommand) HasSignalName() bool {
	if o != nil && o.SignalName != nil {
		return true
	}

	return false
}

// SetSignalName gets a reference to the given string and assigns it to the SignalName field.
func (o *SignalCommand) SetSignalName(v string) {
	o.SignalName = &v
}

func (o SignalCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommandId != nil {
		toSerialize["commandId"] = o.CommandId
	}
	if o.SignalName != nil {
		toSerialize["signalName"] = o.SignalName
	}
	return json.Marshal(toSerialize)
}

type NullableSignalCommand struct {
	value *SignalCommand
	isSet bool
}

func (v NullableSignalCommand) Get() *SignalCommand {
	return v.value
}

func (v *NullableSignalCommand) Set(val *SignalCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalCommand(val *SignalCommand) *NullableSignalCommand {
	return &NullableSignalCommand{value: val, isSet: true}
}

func (v NullableSignalCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


