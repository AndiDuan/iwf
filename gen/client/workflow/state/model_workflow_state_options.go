/*
WorkflowState APIs

This APIs for iwf-server to invoke user workflow code defined in WorkflowState using any iwf SDKs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package state

import (
	"encoding/json"
)

// WorkflowStateOptions struct for WorkflowStateOptions
type WorkflowStateOptions struct {
	SearchAttributesLoadingPolicy *AttributesLoadingPolicy `json:"searchAttributesLoadingPolicy,omitempty"`
	QueryAttributesLoadingPolicy *AttributesLoadingPolicy `json:"queryAttributesLoadingPolicy,omitempty"`
	CommandCarryOverPolicy *CommandCarryOverPolicy `json:"commandCarryOverPolicy,omitempty"`
}

// NewWorkflowStateOptions instantiates a new WorkflowStateOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStateOptions() *WorkflowStateOptions {
	this := WorkflowStateOptions{}
	return &this
}

// NewWorkflowStateOptionsWithDefaults instantiates a new WorkflowStateOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStateOptionsWithDefaults() *WorkflowStateOptions {
	this := WorkflowStateOptions{}
	return &this
}

// GetSearchAttributesLoadingPolicy returns the SearchAttributesLoadingPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetSearchAttributesLoadingPolicy() AttributesLoadingPolicy {
	if o == nil || o.SearchAttributesLoadingPolicy == nil {
		var ret AttributesLoadingPolicy
		return ret
	}
	return *o.SearchAttributesLoadingPolicy
}

// GetSearchAttributesLoadingPolicyOk returns a tuple with the SearchAttributesLoadingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetSearchAttributesLoadingPolicyOk() (*AttributesLoadingPolicy, bool) {
	if o == nil || o.SearchAttributesLoadingPolicy == nil {
		return nil, false
	}
	return o.SearchAttributesLoadingPolicy, true
}

// HasSearchAttributesLoadingPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasSearchAttributesLoadingPolicy() bool {
	if o != nil && o.SearchAttributesLoadingPolicy != nil {
		return true
	}

	return false
}

// SetSearchAttributesLoadingPolicy gets a reference to the given AttributesLoadingPolicy and assigns it to the SearchAttributesLoadingPolicy field.
func (o *WorkflowStateOptions) SetSearchAttributesLoadingPolicy(v AttributesLoadingPolicy) {
	o.SearchAttributesLoadingPolicy = &v
}

// GetQueryAttributesLoadingPolicy returns the QueryAttributesLoadingPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetQueryAttributesLoadingPolicy() AttributesLoadingPolicy {
	if o == nil || o.QueryAttributesLoadingPolicy == nil {
		var ret AttributesLoadingPolicy
		return ret
	}
	return *o.QueryAttributesLoadingPolicy
}

// GetQueryAttributesLoadingPolicyOk returns a tuple with the QueryAttributesLoadingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetQueryAttributesLoadingPolicyOk() (*AttributesLoadingPolicy, bool) {
	if o == nil || o.QueryAttributesLoadingPolicy == nil {
		return nil, false
	}
	return o.QueryAttributesLoadingPolicy, true
}

// HasQueryAttributesLoadingPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasQueryAttributesLoadingPolicy() bool {
	if o != nil && o.QueryAttributesLoadingPolicy != nil {
		return true
	}

	return false
}

// SetQueryAttributesLoadingPolicy gets a reference to the given AttributesLoadingPolicy and assigns it to the QueryAttributesLoadingPolicy field.
func (o *WorkflowStateOptions) SetQueryAttributesLoadingPolicy(v AttributesLoadingPolicy) {
	o.QueryAttributesLoadingPolicy = &v
}

// GetCommandCarryOverPolicy returns the CommandCarryOverPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetCommandCarryOverPolicy() CommandCarryOverPolicy {
	if o == nil || o.CommandCarryOverPolicy == nil {
		var ret CommandCarryOverPolicy
		return ret
	}
	return *o.CommandCarryOverPolicy
}

// GetCommandCarryOverPolicyOk returns a tuple with the CommandCarryOverPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetCommandCarryOverPolicyOk() (*CommandCarryOverPolicy, bool) {
	if o == nil || o.CommandCarryOverPolicy == nil {
		return nil, false
	}
	return o.CommandCarryOverPolicy, true
}

// HasCommandCarryOverPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasCommandCarryOverPolicy() bool {
	if o != nil && o.CommandCarryOverPolicy != nil {
		return true
	}

	return false
}

// SetCommandCarryOverPolicy gets a reference to the given CommandCarryOverPolicy and assigns it to the CommandCarryOverPolicy field.
func (o *WorkflowStateOptions) SetCommandCarryOverPolicy(v CommandCarryOverPolicy) {
	o.CommandCarryOverPolicy = &v
}

func (o WorkflowStateOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchAttributesLoadingPolicy != nil {
		toSerialize["searchAttributesLoadingPolicy"] = o.SearchAttributesLoadingPolicy
	}
	if o.QueryAttributesLoadingPolicy != nil {
		toSerialize["queryAttributesLoadingPolicy"] = o.QueryAttributesLoadingPolicy
	}
	if o.CommandCarryOverPolicy != nil {
		toSerialize["commandCarryOverPolicy"] = o.CommandCarryOverPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowStateOptions struct {
	value *WorkflowStateOptions
	isSet bool
}

func (v NullableWorkflowStateOptions) Get() *WorkflowStateOptions {
	return v.value
}

func (v *NullableWorkflowStateOptions) Set(val *WorkflowStateOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStateOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStateOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStateOptions(val *WorkflowStateOptions) *NullableWorkflowStateOptions {
	return &NullableWorkflowStateOptions{value: val, isSet: true}
}

func (v NullableWorkflowStateOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStateOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


