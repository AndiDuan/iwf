/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// SignalResult struct for SignalResult
type SignalResult struct {
	CommandId *string `json:"commandId,omitempty"`
	SignalStatus *string `json:"signalStatus,omitempty"`
	SignalName *string `json:"signalName,omitempty"`
	SignalValue *EncodedObject `json:"signalValue,omitempty"`
}

// NewSignalResult instantiates a new SignalResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalResult() *SignalResult {
	this := SignalResult{}
	return &this
}

// NewSignalResultWithDefaults instantiates a new SignalResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalResultWithDefaults() *SignalResult {
	this := SignalResult{}
	return &this
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *SignalResult) GetCommandId() string {
	if o == nil || o.CommandId == nil {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalResult) GetCommandIdOk() (*string, bool) {
	if o == nil || o.CommandId == nil {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *SignalResult) HasCommandId() bool {
	if o != nil && o.CommandId != nil {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *SignalResult) SetCommandId(v string) {
	o.CommandId = &v
}

// GetSignalStatus returns the SignalStatus field value if set, zero value otherwise.
func (o *SignalResult) GetSignalStatus() string {
	if o == nil || o.SignalStatus == nil {
		var ret string
		return ret
	}
	return *o.SignalStatus
}

// GetSignalStatusOk returns a tuple with the SignalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalStatusOk() (*string, bool) {
	if o == nil || o.SignalStatus == nil {
		return nil, false
	}
	return o.SignalStatus, true
}

// HasSignalStatus returns a boolean if a field has been set.
func (o *SignalResult) HasSignalStatus() bool {
	if o != nil && o.SignalStatus != nil {
		return true
	}

	return false
}

// SetSignalStatus gets a reference to the given string and assigns it to the SignalStatus field.
func (o *SignalResult) SetSignalStatus(v string) {
	o.SignalStatus = &v
}

// GetSignalName returns the SignalName field value if set, zero value otherwise.
func (o *SignalResult) GetSignalName() string {
	if o == nil || o.SignalName == nil {
		var ret string
		return ret
	}
	return *o.SignalName
}

// GetSignalNameOk returns a tuple with the SignalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalNameOk() (*string, bool) {
	if o == nil || o.SignalName == nil {
		return nil, false
	}
	return o.SignalName, true
}

// HasSignalName returns a boolean if a field has been set.
func (o *SignalResult) HasSignalName() bool {
	if o != nil && o.SignalName != nil {
		return true
	}

	return false
}

// SetSignalName gets a reference to the given string and assigns it to the SignalName field.
func (o *SignalResult) SetSignalName(v string) {
	o.SignalName = &v
}

// GetSignalValue returns the SignalValue field value if set, zero value otherwise.
func (o *SignalResult) GetSignalValue() EncodedObject {
	if o == nil || o.SignalValue == nil {
		var ret EncodedObject
		return ret
	}
	return *o.SignalValue
}

// GetSignalValueOk returns a tuple with the SignalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalValueOk() (*EncodedObject, bool) {
	if o == nil || o.SignalValue == nil {
		return nil, false
	}
	return o.SignalValue, true
}

// HasSignalValue returns a boolean if a field has been set.
func (o *SignalResult) HasSignalValue() bool {
	if o != nil && o.SignalValue != nil {
		return true
	}

	return false
}

// SetSignalValue gets a reference to the given EncodedObject and assigns it to the SignalValue field.
func (o *SignalResult) SetSignalValue(v EncodedObject) {
	o.SignalValue = &v
}

func (o SignalResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommandId != nil {
		toSerialize["commandId"] = o.CommandId
	}
	if o.SignalStatus != nil {
		toSerialize["signalStatus"] = o.SignalStatus
	}
	if o.SignalName != nil {
		toSerialize["signalName"] = o.SignalName
	}
	if o.SignalValue != nil {
		toSerialize["signalValue"] = o.SignalValue
	}
	return json.Marshal(toSerialize)
}

type NullableSignalResult struct {
	value *SignalResult
	isSet bool
}

func (v NullableSignalResult) Get() *SignalResult {
	return v.value
}

func (v *NullableSignalResult) Set(val *SignalResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalResult(val *SignalResult) *NullableSignalResult {
	return &NullableSignalResult{value: val, isSet: true}
}

func (v NullableSignalResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


