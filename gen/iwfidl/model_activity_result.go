/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// ActivityResult struct for ActivityResult
type ActivityResult struct {
	CommandId *string `json:"commandId,omitempty"`
	ActivityType *string `json:"activityType,omitempty"`
	Output *EncodedObject `json:"output,omitempty"`
	ActivityStatus *string `json:"activityStatus,omitempty"`
	TimeoutType *string `json:"timeoutType,omitempty"`
}

// NewActivityResult instantiates a new ActivityResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityResult() *ActivityResult {
	this := ActivityResult{}
	return &this
}

// NewActivityResultWithDefaults instantiates a new ActivityResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityResultWithDefaults() *ActivityResult {
	this := ActivityResult{}
	return &this
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *ActivityResult) GetCommandId() string {
	if o == nil || o.CommandId == nil {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityResult) GetCommandIdOk() (*string, bool) {
	if o == nil || o.CommandId == nil {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *ActivityResult) HasCommandId() bool {
	if o != nil && o.CommandId != nil {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *ActivityResult) SetCommandId(v string) {
	o.CommandId = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *ActivityResult) GetActivityType() string {
	if o == nil || o.ActivityType == nil {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityResult) GetActivityTypeOk() (*string, bool) {
	if o == nil || o.ActivityType == nil {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *ActivityResult) HasActivityType() bool {
	if o != nil && o.ActivityType != nil {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *ActivityResult) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ActivityResult) GetOutput() EncodedObject {
	if o == nil || o.Output == nil {
		var ret EncodedObject
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityResult) GetOutputOk() (*EncodedObject, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ActivityResult) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given EncodedObject and assigns it to the Output field.
func (o *ActivityResult) SetOutput(v EncodedObject) {
	o.Output = &v
}

// GetActivityStatus returns the ActivityStatus field value if set, zero value otherwise.
func (o *ActivityResult) GetActivityStatus() string {
	if o == nil || o.ActivityStatus == nil {
		var ret string
		return ret
	}
	return *o.ActivityStatus
}

// GetActivityStatusOk returns a tuple with the ActivityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityResult) GetActivityStatusOk() (*string, bool) {
	if o == nil || o.ActivityStatus == nil {
		return nil, false
	}
	return o.ActivityStatus, true
}

// HasActivityStatus returns a boolean if a field has been set.
func (o *ActivityResult) HasActivityStatus() bool {
	if o != nil && o.ActivityStatus != nil {
		return true
	}

	return false
}

// SetActivityStatus gets a reference to the given string and assigns it to the ActivityStatus field.
func (o *ActivityResult) SetActivityStatus(v string) {
	o.ActivityStatus = &v
}

// GetTimeoutType returns the TimeoutType field value if set, zero value otherwise.
func (o *ActivityResult) GetTimeoutType() string {
	if o == nil || o.TimeoutType == nil {
		var ret string
		return ret
	}
	return *o.TimeoutType
}

// GetTimeoutTypeOk returns a tuple with the TimeoutType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityResult) GetTimeoutTypeOk() (*string, bool) {
	if o == nil || o.TimeoutType == nil {
		return nil, false
	}
	return o.TimeoutType, true
}

// HasTimeoutType returns a boolean if a field has been set.
func (o *ActivityResult) HasTimeoutType() bool {
	if o != nil && o.TimeoutType != nil {
		return true
	}

	return false
}

// SetTimeoutType gets a reference to the given string and assigns it to the TimeoutType field.
func (o *ActivityResult) SetTimeoutType(v string) {
	o.TimeoutType = &v
}

func (o ActivityResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommandId != nil {
		toSerialize["commandId"] = o.CommandId
	}
	if o.ActivityType != nil {
		toSerialize["activityType"] = o.ActivityType
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	if o.ActivityStatus != nil {
		toSerialize["activityStatus"] = o.ActivityStatus
	}
	if o.TimeoutType != nil {
		toSerialize["timeoutType"] = o.TimeoutType
	}
	return json.Marshal(toSerialize)
}

type NullableActivityResult struct {
	value *ActivityResult
	isSet bool
}

func (v NullableActivityResult) Get() *ActivityResult {
	return v.value
}

func (v *NullableActivityResult) Set(val *ActivityResult) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityResult) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityResult(val *ActivityResult) *NullableActivityResult {
	return &NullableActivityResult{value: val, isSet: true}
}

func (v NullableActivityResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


